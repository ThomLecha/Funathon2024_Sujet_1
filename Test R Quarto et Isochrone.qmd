---
title: "My Document"
format:
  html:
    toc: true
    number-sections: true
editor: visual
editor_options: 
  chunk_output_type: console
---

# Funathon 2024 - Sujet 1

Visualiser les émissions de C02 liées à une mesure de restriction de liaison aérienne relativement à des durées de trajets ferroviaires.

## 1.Interaction avec l'API de routage de TravelTime

Commencer par créer un compte sur [TravelTime](https://account.traveltime.com/) afin de pouvoir accéder à leur API via des clés API.

On teste ensuite l'envoie d'une requête contenant un JSON à l'endpoint (i.e au lien) d'une API de TravelTime grâce au code fourni.

Pour cela, on crée un JSON (en chaine de caractères) de test pour l'API de routage "routes" de TravelTime à partir de la documentation (playground disponible [ici](https://playground.traveltime.com/routes)). On teste l'API et on observe le contenu de sa réponse.

*Chunk de code qui sera donnée aux participants (à l'exception des 4 variables données initialement)*

```{r}
if (!requireNamespace("httr")){install.packages("httr")}
library(httr)

X_API_ID <- "c32b3037"
X_API_KEY <- "c0c067d7cddbdb9acbd6389ef5b73aae"
ROUTES_API_URL <- "https://api.traveltimeapp.com/v4/routes"

json <- '{
  "locations": [
    {
      "id": "point-from",
      "coords": {
        "lat": 48.8534,
        "lng": 2.3483
      }
    },
    {
      "id": "point-to-1",
      "coords": {
        "lat": 43.6044,
        "lng": 1.4442
      }
    }
  ],
  "departure_searches": [
    {
      "id": "departure-search",
      "transportation": {
        "type": "public_transport",
        "walking_time": 900,
        "cycling_time_to_station": 100,
        "parking_time": 0,
        "boarding_time": 0,
        "driving_time_to_station": 1800,
        "pt_change_delay": 0,
        "disable_border_crossing": false
      },
      "departure_location_id": "point-from",
      "arrival_location_ids": [
        "point-to-1"
      ],
      "departure_time": "2024-03-17T18:00:00.000Z",
      "properties": [
        "travel_time",
        "route"
      ],
      "range": {
        "enabled": true,
        "max_results": 5,
        "width": 43200
      }
    }
  ]
}'

# On prépare les headers
headers <- httr::add_headers("Content-Type" = "application/json",
                             "X-Application-Id" = X_API_ID,
                             "X-Api-Key" = X_API_KEY)
# On envoie la requête avec les headers spécifiés
response <- httr::POST(ROUTES_API_URL, body = json, encode = "json", headers)
# On récupère le contenu de la réponse
content <- httr::content(response)
# On récupère le code de la réponse
code <- httr::status_code(response)

#View(content) # Ne marche pas pour les rendus Quarto
content # Très long à afficher dans les rendus Quarto
code
```

On encapsule le code précédent dans une fonction qui envoie une requête contenant un JSON (en chaine de caractères) à l'endpoint d'une API de TravelTime et qui renvoie le contenu et le code de la réponse de l'API

*Chunk de code qui sera donnée aux participants*

```{r}
if (!requireNamespace("httr")){install.packages("httr")}
library(httr)

getTraveltimeAPIResponse <- function(apiUrl, json){
  # On prépare les headers
  headers <- httr::add_headers("Content-Type" = "application/json",
                               "X-Application-Id" = X_API_ID,
                               "X-Api-Key" = X_API_KEY)
  # On envoie la requête avec les headers spécifiés
  response <- httr::POST(apiUrl, body = json, encode = "json", headers)
  # On récupère le contenu de la réponse
  content <- httr::content(response)
  # On récupère le code de la réponse
  code <- httr::status_code(response)
  return(list(content, code))
}
```

On teste la fonction avec le json précédent et on regarde le contenu de la réponse de l'API

```{r}
response <- getTraveltimeAPIResponse(ROUTES_API_URL, json)
#View(response) # Ne marche pas pour les rendus Quarto
response # Très long à afficher dans les rendus Quarto
```

Après observation du contenu de la réponse, on extrait les données utiles de celui-ci

```{r}
apiData <- response[[1]]$results[[1]]$locations[[1]]$properties
#View(apiData) # Ne marche pas pour les rendus Quarto
apiData # Très long à afficher dans les rendus Quarto
```

## 2.Récupération des coordonnées des villes françaises

On utilise le package "osmdata" de OpenStreetMap pour récupérer les coordonnées des villes françaises qui nous intéressent

```{r}
# On installe et on importe le package "osmdata"
if (!requireNamespace("osmdata")){install.packages("osmdata")}
library(osmdata)

CITY_NAME <- "Lille"

# On obtient les coordonnées de la ville
coordinates <-  rowMeans(getbb(paste0(CITY_NAME,", France")))
coordinates

# On constate que la latitude et la longitude sont inversées, on les inverse
coordinates <- rev(coordinates)
names(coordinates) <- c("lat", "lng")
coordinates

```

Pour palier au problème de coordonnées induit par la méthode précédente on utilise une base de donnée externe avec les coordonnées géographiques des gares française qui se situe à l'adresse suivante : [TravelTime](https://www.data.gouv.fr/fr/datasets/liste-des-gares/)

```{r}
# On installe et on importe le package "tmaptools"
if (!requireNamespace("dplyr")){install.packages("dplyr")}
library(dplyr)

# on charge les données et la gare d'exmple
GARE_NAME <- "Lille-Flandres"
gareData <- read.csv2("https://www.data.gouv.fr/fr/datasets/r/d22ba593-90a4-4725-977c-095d1f654d28")

# on conserve les infos utiles
gareData <- gareData %>% 
  select(libelle, commune, x_wgs84, y_wgs84) %>% 
  rename("lng" = x_wgs84, "lat"=y_wgs84)

# On obtient les coordonnées de la gare
LilleData <- gareData %>% 
  filter(libelle == GARE_NAME)
coordsLilleFlandres <- c(as.numeric(LilleData$lat[1]),as.numeric(LilleData$lng[1]))

```

On généralise le cas précédent à l'aide d'une fonction renvoyant les coordonnées de la gare d'une ville demandée

```{r}
getStationCoordinates <- function(gare, verbose = TRUE){
  data <- gareData %>% 
    filter(libelle == gare)
  
  coordinates <- c(as.numeric(data$lat[1]),as.numeric(data$lng[1]))
  # Si verbose est TRUE, on affiche les coordonnées
  if (verbose){
    cat(gare, " -> (", coordinates[1],", ",coordinates[2], ")\n", sep = "")
  }
  return(coordinates)
}
getStationCoordinates("Toulouse-Matabiau")
```

## 3.Obtention du temps de transport entre 2 villes

On crée une fonction qui prend en paramètre deux couples de coordonnées et qui renvoie un JSON (en chaine de caractères) pour l'API de routage

On crée un JSON (en chaine de caractères) pour l'API de routage "routes" de TravelTime à partir de la documentation (playground disponible [ici](https://playground.traveltime.com/routes)) avec les caractéristiques suivantes :

-   Lieu de départ : Paris-Montparnasse (48.8406, 2.3198)

-   Lieu d'arrivée : Toulouse-Matabiau (43.6107, 1.4544)

-   Mode de transport : Transport public (bus, métro, tram, train)

-   Date et heure : 2024-08-14 à 18h00 UTC

-   Flexibilité : 12h00

-   Le reste des paramètres par défaut

```{r}
getRoutesApiJson <- function(lat1, lng1, lat2, lng2){
  # On créé le JSON pour l'API de routage en se basant sur celui de la sous-partie "Interaction avec l'API de routage de TravelTime"
  json <- paste0('{
    "locations": [
      {
        "id": "point-from",
        "coords": {
          "lat": ', lat1, ',
          "lng": ', lng1, '
        }
      },
      {
        "id": "point-to-1",
        "coords": {
          "lat": ', lat2, ',
          "lng": ', lng2, '
        }
      }
    ],
    "departure_searches": [
      {
        "id": "departure-search",
        "transportation": {
          "type": "public_transport",
          "walking_time": 900,
          "cycling_time_to_station": 100,
          "parking_time": 0,
          "boarding_time": 0,
          "driving_time_to_station": 1800,
          "pt_change_delay": 0,
          "disable_border_crossing": false
        },
        "departure_location_id": "point-from",
        "arrival_location_ids": [
          "point-to-1"
        ],
        "departure_time": "2024-08-04T09:00:00.000Z",
        "properties": [
          "travel_time",
          "route"
        ],
        "range": {
          "enabled": true,
          "max_results": 5,
          "width": 43200
        }
      }
    ]
  }')
  return(json)
}
```

On crée une fonction qui prend en paramètre les noms de 2 gares et qui renvoie le temps de transport en heure entre ces 2 gares. On prendra soin de gérer le cas où aucun itinéraire n'est trouvé en renvoyant 'Inf'

```{r}
getTravelTimeBetweenStations <- function(station1, station2, verbose = TRUE){
  # On récupère les coordonnées des villes
  coordinates1 <- getStationCoordinates(station1, verbose = FALSE)
  coordinates2 <- getStationCoordinates(station2, verbose = FALSE)
  
  # On récupère le JSON pour l'API de routage
  json <- getRoutesApiJson(coordinates1[1], coordinates1[2], coordinates2[1], coordinates2[2])
  
  # On questionne l'API de routage avec le json
  response <- getTraveltimeAPIResponse(ROUTES_API_URL, json)
  
  # Si on a le code de réponse 429, on dépasse le quota de requêtes par minute
  # donc on attend 1 minute et on relance la fonction en récursion
  if (response[[2]] == 429){
    print("Trop de requêtes, on attend une minute...")
    Sys.sleep(60)
    return(getTravelTimeBetweenStations(city1, city2, verbose))
  }
  
  # Si aucun itinéraire n'a été trouvé
  if (length(response[[1]]$results[[1]]$locations) == 0){
      travelTime <- Inf
      # On affiche le temps de trajet si verbose est TRUE
      if (verbose){
        cat(station1, " -> ", station2, " : ", travelTime, "\n")
      }
      return(travelTime)
  # Sinon
  }else{
    # On extrait les données utiles
    apiData <- response[[1]]$results[[1]]$locations[[1]]$properties
    
    # On boucle sur apiData pour récupérer les temps de trajet
    travelTimes <- c()
    for (i in 1:length(apiData)){
      # On convertit le temps de trajet en heures et on l'ajoute à travelTimes
      travelTime <- apiData[[i]]$travel_time
      travelTimes <- c(travelTimes, travelTime)
    }
    
    # On récupère l'itinéraire le plus court et on convertie le temps de trajet en heures
    travelTime <- min(travelTimes) / 3600
    
    # On affiche le temps de trajet si verbose est TRUE
    if (verbose){
      cat(station1, " -> ", station2, " : ", travelTime, "\n")
    }
    
    return(travelTime)
  }
}

# test lille
jsonToulouseParis <- getRoutesApiJson(43.6107, 1.4544,48.8406,2.3198)
response2 <- getTraveltimeAPIResponse(ROUTES_API_URL, jsonToulouseParis)
content2 <- response2[[1]]
```

On teste la fonction avec Toulouse et Paris

```{r}
timeTravels <- getTravelTimeBetweenStations("Toulouse-Matabiau", "Paris-Montparnasse")
timeTravels
```

On fait une matrice temporelle entre les 5 plus grandes agglomérations françaises

```{r}
cities <- c("Paris", "Lyon", "Marseille", "Toulouse", "Lille")

# Top 10 des plus grandes agglomérations françaises
#cities <- c("Paris", "Marseille", "Lyon", "Toulouse", "Nice", "Nantes", "Montpellier", "Strasbourg", "Bordeaux", "Lille")

timeMatrix <- matrix(NA, nrow = length(cities), ncol = length(cities), dimnames = list(cities, cities))

for (i in 1:length(cities)){
  for (j in 1:i){
    if (j != i){
      timeTravel <- getTravelTimeBetweenCities(cities[i], cities[j])
      timeMatrix[cities[i], cities[j]] <- timeTravel
      timeMatrix[cities[j], cities[i]] <- timeTravel
    }
  }
}

timeMatrix
```

On conserve les couples de villes reliées par un temps de trajet inférieur à 2h30

```{r}
THRESHOLD <- 5

# On met les couples de ville de la matrice timeMatrix dans une liste
underThresholdRoutes <- list()
for (i in 1:length(cities)){
  for (j in 1:i){
    if (i != j){
      if (timeMatrix[i, j] < THRESHOLD){
        underThresholdRoutes[[length(underThresholdRoutes)+1]] <- c(cities[i], cities[j])
      }
    }
  }
}

underThresholdRoutes
```

## 4.Téléchargement et extraction des données de trafic aérien entre 2 aéroports

On télécharge les données de trafic aérien des liaisons en 2019 de la DGAC en opendata [ici](https://www.data.gouv.fr/fr/datasets/trafic-aerien-commercial-mensuel-francais-par-paire-daeroports-par-sens-depuis-1990/)

```{r}
if (!requireNamespace("dplyr")){install.packages("dplyr")}
library(dplyr)

AIR_TRAFIC_DATA_URL <- "https://www.data.gouv.fr/fr/datasets/r/0c0a451e-983b-4f06-9627-b5ff1bccd2fc" 

airTraficDf <- read.csv(AIR_TRAFIC_DATA_URL, sep = ";", dec = ",")

head(airTraficDf)
```

On crée une fonction qui renvoie le trafic total d'une liaison en 2019 en PKT à partir de deux noms de villes (et non d'aéroport) en paramètre (Les noms des principaux aéroports de métropole contiennent le nom de la ville qu'il déssert)

```{r}
getAirTraficBetweenCities <- function(city1, city2){
  
  # Trafic dans le sens city1 -> city2
  airTrafic1 <- airTraficDf %>%
             filter(grepl(city1, LSN_DEP_NOM, ignore.case = TRUE) & grepl(city2, LSN_ARR_NOM, ignore.case = TRUE)) %>%
    summarise(trafic = sum(LSN_DIST*LSN_PAX_loc))
  
  # Trafic dans le sens city2 -> city1
  airTrafic2 <- airTraficDf %>%
             filter(grepl(city2, LSN_DEP_NOM, ignore.case = TRUE) & grepl(city1, LSN_ARR_NOM, ignore.case = TRUE)) %>%
    summarise(trafic = sum(LSN_DIST*LSN_PAX_loc))
  
  return(as.numeric(airTrafic1 + airTrafic2))
}
```

On teste la fonction avec Toulouse et Paris

```{r}
trafic <- getAirTraficBetweenCities("Toulouse", "Paris")
trafic
```

On somme le trafic aérien pour chaque couple de villes reliées par un temps de trajet inférieur à 2h30

```{r}
underThresholdAirTrafic <- 0
for (cities in underThresholdRoutes){
  airTrafic <- getAirTraficBetweenCities(cities[1], cities[2])
  underThresholdAirTrafic <- underThresholdAirTrafic + airTrafic
}
underThresholdAirTrafic
```

On calcule les émissions de CO2 que représente ce trafic avec une estimation des gCO2éq par PKT de [statista](https://www.statista.com/statistics/1113177/co2-emissions-by-airline-europe/)

```{r}
GCO2_PER_PKT <- 80

# On estime les émissions de CO2 en tCO2éq par PKT
underThresholdEmissions <- underThresholdAirTrafic * GCO2_PER_PKT / 1000000
underThresholdEmissions
```

## 5.Datavisualisation des données sur une carte avec le package leaflet

Commencer par créer un compte sur [Stadia Maps](https://client.stadiamaps.com/signup/?utm_content=top_nav_signup&utm_source=marketing_site) afin de pouvoir accéder à leur API via des clés API.

On met dans des variables globales la clé API de Stadia Maps et les liens des tuiles Stadia Maps pour les fonds de carte (URL de fonds de carte [ici](https://stadiamaps.com/themes/))

```{r}
if (!requireNamespace("leaflet")){install.packages("leaflet")}
library(leaflet)

STADIA_MAPS_API_KEY <- "e6f6cfad-a662-4589-b060-1d7eed6d88a3"

ALIDADE_SMOOTH_TILES_URL <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key="
OUTDOORS_TILES_URL <- "https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png?api_key="
ALIDADE_SATELLITE_TILES_URL <- "https://tiles.stadiamaps.com/tiles/alidade_satellite/{z}/{x}/{y}{r}.png?api_key="

# On passe la clé API dans les URL des tuiles
TILES_URL <- paste0(ALIDADE_SMOOTH_TILES_URL, STADIA_MAPS_API_KEY)
```

On crée un dataframe avec tous les éléments pour cartographier les émissions sur les lignes repérées (les noms, les latitudes et les longitudes des villes de départ et d'arrivée, et les émissions de CO2 des lignes associées)

```{r}
emissionByRouteDf <- data.frame(city1 = character(), city2 = character(), lat1 = numeric(), lng1 = numeric(), lat2 = numeric(), lng2 = numeric(), emissions = numeric())

for (route in underThresholdRoutes){
  # On récupère les coordonnées des villes
  coordinates1 <- getCityCoordinates(route[1], verbose = FALSE)
  coordinates2 <- getCityCoordinates(route[2], verbose = FALSE)
  
  # On récupère les émissions de CO2 associées
  emissions <- getAirTraficBetweenCities(route[1], route[2]) * GCO2_PER_PKT / 1000000
  
  # On ajoute les données au dataframe
  dfTemp <- data.frame(city1 = route[1], city2 = route[2],
                       lat1 = coordinates1[1], lng1 = coordinates1[2],
                       lat2 = coordinates2[1], lng2 = coordinates2[2],
                       emissions = emissions, row.names = paste0(route[1], "-", route[2]))
  
  emissionByRouteDf <- rbind(emissionByRouteDf, dfTemp)
}

emissionByRouteDf
```

On créé une carte de base avec le fond de carte Stadia Maps

```{r}
leafletMap <- leaflet() %>%
  addTiles(urlTemplate = TILES_URL)
```

On boucle pour ajouter toutes les lignes repérées à la carte : - Si les émissions sont non-nulles, on les affiche en rouge avec une épaisseur de trait proportionnelle aux émissions - Si les émissions sont nulles, on les affiche en noir en trait fin

```{r}
for (i in 1:nrow(emissionByRouteDf)) {
  # Si les émissions sont non-nulles
  if (emissionByRouteDf[i,"emissions"] > 0){
      leafletMap <- leafletMap %>%
      addPolylines(lat = c(emissionByRouteDf[i,"lat1"], emissionByRouteDf[i,"lat2"]),
                   lng = c(emissionByRouteDf[i,"lng1"], emissionByRouteDf[i,"lng2"]),
                   weight = emissionByRouteDf[i,"emissions"]/10000,
                   color = "red", opacity = 0.5
                   )
  # Si les émissions sont nulles
      }else{
    leafletMap <- leafletMap %>%
      addPolylines(lat = c(emissionByRouteDf[i,"lat1"], emissionByRouteDf[i,"lat2"]),
                   lng = c(emissionByRouteDf[i,"lng1"], emissionByRouteDf[i,"lng2"]),
                   weight = 1,
                   color = "black", opacity = 0.5
                   )
  }
}
```

On boucle pour ajouter toutes les villes repérées à la carte

```{r}

# On personnalise les étiquettes qui seront affichées sur la carte
customLabelOptions <- labelOptions(noHide = TRUE, style = list("background" = "rgba(255, 255, 255, 0.5)"))

for (i in 1:nrow(emissionByRouteDf)) {
  leafletMap <- leafletMap %>%
    addCircleMarkers(lat = emissionByRouteDf[i, "lat1"],
                     lng = emissionByRouteDf[i, "lng1"],
                     radius = 5,
                     color = "#4444AA",
                     label = as.character(emissionByRouteDf[i, "city1"]),
                     labelOptions = customLabelOptions) %>%
    addCircleMarkers(lat = emissionByRouteDf[i, "lat2"],
                     lng = emissionByRouteDf[i, "lng2"],
                     radius = 5,
                     color = "#4444AA",
                     label = as.character(emissionByRouteDf[i, "city2"]),
                     labelOptions = customLabelOptions)
}

```

On affiche la carte

```{r}
leafletMap
```

# Code annexe

## Interaction avec l'API d'isochrones de TravelTime

On créé un JSON (en chaine de caractères) pour l'API "isochrones" de TravelTime à partir de la documentation (playground disponible [ici](https://playground.traveltime.com/isochrones)) avec les caractéristiques suivantes :

-   Lieu : Centre de Paris (48.8534, 2.3483)

-   Isochrone : 1h00

-   Mode de transport : Transport public (bus, métro, tram, train)

-   Date et heure : 2024-03-17 à 18h00 UTC

-   Flexibilité : 1h00

-   Le reste des paramètres par défaut

```{r}
json <- '{
  "departure_searches": [
    {
      "id": "isochrone-0",
      "coords": {
        "lat": 48.8534,
        "lng": 2.3483
      },
      "departure_time": "2024-03-17T18:00:00.000Z",
      "travel_time": 3600,
      "transportation": {
        "type": "public_transport",
        "walking_time": 900,
        "cycling_time_to_station": 100,
        "parking_time": 0,
        "boarding_time": 0,
        "driving_time_to_station": 1800,
        "pt_change_delay": 0,
        "disable_border_crossing": false
      },
      "level_of_detail": {
        "scale_type": "simple",
        "level": "medium"
      },
      "single_shape": false,
      "no_holes": false,
      "range": {
        "enabled": true,
        "width": 3600
      }
    }
  ]
}'
```

On teste l'API avec la fonction et le json, et on regarde le contenu de la réponse de l'API

```{r}
ISOCHRONE_API_URL <- "https://api.traveltimeapp.com/v4/time-map"

response <- getTraveltimeAPIResponse(ISOCHRONE_API_URL, json)
#View(response) # Ne marche pas pour les rendus Quarto
response
```

Après observation du contenu de la réponse, on extrait les données utiles de celui-ci

```{r}
apiData <- response[[1]]$results[[1]]$shapes
#View(apiData) # Ne marche pas pour les rendus Quarto
apiData # Très long à afficher dans les rendus Quarto
```

Après observation des données, on extrait le premier polygone de l'isochrone

```{r}
# On extrait le premier polygone de l'isochrone
rawShape1 <- apiData[[1]]$shell
# On initialise un dataframe vide
shape1 <- data.frame(lat = numeric(), lng = numeric())
# On parcourt chaque élément de rawShape1 pour le transformer en dataframe
for(currentPoint in rawShape1) {
  # On ajoute les coordonnées du point courant à shape1
  shape1 <- rbind(shape1, data.frame(lat = currentPoint$lat, lng = currentPoint$lng))
}
shape1
```

On extrait tous les polygones de l'isochrone dans une liste en faisant une boucle du code précédent

```{r}
shapeList <- list()
# On boucle sur chaque polygone de l'isochrone
for (i in 1:length(apiData)){
  
  
  # On extrait le n-ième polygone de l'isochrone
  rawShape <- response[[1]]$results[[1]]$shapes[[i]]$shell
  # On initialise un dataframe vide
  shape <- data.frame(lat = numeric(), lng = numeric())
  # On parcourt chaque élément de rawShape pour le transformer en dataframe
  for(currentPoint in rawShape) {
    # On ajoute les coordonnées du point courant à shape
    shape <- rbind(shape, data.frame(lat = currentPoint$lat, lng = currentPoint$lng))
  }
  
  
  # On ajoute le polygone à la liste
  shapeList[[length(shapeList)+1]] <- shape
}
```

## Affichage de la carte et de l'isochrone avec le package leaflet

On entre la clé API de Stadia Maps (créér un compte [ici](https://client.stadiamaps.com/signup/?utm_content=top_nav_signup&utm_source=marketing_site)) et on entre les liens des tuiles Stadia Maps pour les fonds de carte (autres URL de fonds de carte [ici](https://stadiamaps.com/themes/))

```{r}
if (!requireNamespace("leaflet")){install.packages("leaflet")}
library(leaflet)

STADIA_MAPS_API_KEY <- "e6f6cfad-a662-4589-b060-1d7eed6d88a3"

ALIDADE_SMOOTH_TILES_URL <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png?api_key="
OUTDOORS_TILES_URL <- "https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png?api_key="
ALIDADE_SATELLITE_TILES_URL <- "https://tiles.stadiamaps.com/tiles/alidade_satellite/{z}/{x}/{y}{r}.png?api_key="

# On passe la clé API dans les URL des tuiles
TILES_URL <- paste0(ALIDADE_SMOOTH_TILES_URL, STADIA_MAPS_API_KEY)

```

On créé une carte de base avec le fond de carte Stadia Maps

```{r}
leafletMap <- leaflet() %>%
  addTiles(urlTemplate = TILES_URL)

```

On boucle pour ajouter chaque polygone de shapeList à la carte

```{r}
for (s in shapeList) {
  leafletMap <- leafletMap %>% addPolygons(data = s, 
                                           ~lng, ~lat, 
                                           color = "#FF0000", 
                                           fillColor = "#FFAAAA", 
                                           fillOpacity = 0.5, 
                                           weight = 2)
}
```

On affiche la carte

```{r}
leafletMap
```

## Interaction avec l'API de matrices temporelles de TravelTime

On crée un JSON (en chaine de caractères) pour l'API "travel time distance matrix" de TravelTime à partir de la documentation (playground disponible [ici](https://playground.traveltime.com/travel-time-distance-matrix)) avec les caractéristiques suivantes :

-   Lieu de départ : Paris (48.8534, 2.3483)

-   Lieux d'arrivées : Lille (50.6365, 3.0635), Lyon (45.7578, 4.8320), Marseille (43.2965, 5.3698), Bordeaux (44.8378, -0.5792) et Toulouse (43.6044, 1.4442)

-   Durée maximum : 4h00

-   Mode de transport : Transport public (bus, métro, tram, train)

-   Date et heure : 2024-03-17 à 18h00 UTC

-   Flexibilité : 12h00

-   Le reste des paramètres par défaut

```{r}
json <- '{
  "locations": [
    {
      "id": "starting-location",
      "coords": {
        "lat": 48.8534,
        "lng": 2.3483
      }
    },
    {
      "id": "lille",
      "coords": {
        "lat": 50.6365,
        "lng": 3.0635
      }
    },
    {
      "id": "lyon",
      "coords": {
        "lat": 45.7578,
        "lng": -4.8320
      }
    },
    {
      "id": "marseille",
      "coords": {
        "lat": 43.2965,
        "lng": -5.3698
      }
    },
    {
      "id": "bordeaux",
      "coords": {
        "lat": 44.8378,
        "lng": -0.5792
      }
    },
    {
      "id": "toulouse",
      "coords": {
        "lat": 43.6044,
        "lng": 1.4442
      }
    }
  ],
  "departure_searches": [
    {
      "id": "Departure search",
      "arrival_location_ids": [
        "lille",
        "lyon",
        "marseille",
        "bordeaux",
        "toulouse"
      ],
      "departure_location_id": "starting-location",
      "departure_time": "2024-03-17T18:00:00.000Z",
      "travel_time": 14400,
      "properties": [
        "travel_time"
      ],
      "transportation": {
        "type": "public_transport",
        "walking_time": 900,
        "cycling_time_to_station": 100,
        "parking_time": 0,
        "boarding_time": 0,
        "driving_time_to_station": 1800,
        "pt_change_delay": 0,
        "disable_border_crossing": false
      },
      "range": {
        "enabled": true,
        "width": 43200,
        "max_results": 1
      }
    }
  ]
}'
```

On questionne l'API avec la fonction et le json, et on regarde le contenu de la réponse de l'API

```{r}
TIME_MATRIX_API_URL <- "https://api.traveltimeapp.com/v4/time-filter"

response <- getTraveltimeAPIResponse(TIME_MATRIX_API_URL, json)
#View(response) # Ne marche pas pour les rendus Quarto
response # Très long à afficher dans les rendus Quarto
```

Après observation du contenu de la réponse, on extrait les données utiles de celui-ci

```{r}
apiData <- response[[1]]$results[[1]]
#View(apiData) # Ne marche pas pour les rendus Quarto
apiData # Très long à afficher dans les rendus Quarto
```

## Morceau de code pour un affichage plus proprement des données JSON de taille importante reçu par les API

```{r}
# Package pour afficher les données JSON proprement utilisé plus tard
if (!requireNamespace("jsonlite")){install.packages("jsonlite")}
library(jsonlite)

# Fonction pour tronquer les listes JSON pour les rendre plus lisibles
troncateJson <- function(json, maxPrintedElements = 8) {
  if(is.list(json)) {
    # Application récursive pour les sous-listes
    json <- lapply(json, troncateJson, maxPrintedElements = maxPrintedElements)
    # Troncature de la liste avec indication si nécessaire
    if(length(json) > maxPrintedElements) {
      json <- json[1:maxPrintedElements]
      # Ajout d'un objet spécifique pour indiquer la troncature
      json[["@@@LISTE"]] <- "TRONQUEE@@@"
    }
  }
  return(json)
}

# Modification de la fonction prettyJson pour inclure un nombre maximal de lignes à afficher
prettyJson <- function(json, maxLines = 100, maxPrintedElements = 8) {
  troncatedJson <- troncateJson(json, maxPrintedElements = maxPrintedElements)
  troncatedJsonString <- toJSON(troncatedJson, pretty = TRUE)
  # On limite le nombre de lignes affichées à maxLines
  jsonLines <- unlist(strsplit(troncatedJsonString, "\n"))
  if(length(jsonLines) > maxLines) {
    jsonLines <- head(jsonLines, maxLines)
    jsonLines <- c(jsonLines, "...")
  }
  cat(paste(jsonLines, collapse = "\n"))
  return(paste(jsonLines, collapse = "\n"))
}
```
